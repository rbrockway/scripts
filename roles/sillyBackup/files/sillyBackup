#!/bin/bash

#
# Robert Brockway
#
# 25 February 2023
#
# $1: Hostname
# $2: Filesystem
# $3: Bucket
#

#
# Functions
#

backupToS3()
{
	case $S3 in
	yes)
		echo "Backing up to S3"
		s3cmd put $BACKUPDIR/$TARFILE s3://$BUCKET/$HOST/$DIRECTORY/ &> /dev/null
		case $? in
		0)
			rm -f $BACKUPDIR/$TARFILE
			;;
		*)
			error 90
			;;
		esac
		;;
	no)
		echo "No bucket specified so not backing up to S3"
		;;
	*)
		# This shouldn't happen
		error 95
		;;
	esac
}

cleanEmpty()
{
	echo "Deleting empty backup directories"
	find $BACKUPROOT -type d -empty -delete
	case $? in
	0)
		echo "Delete of empty directories successful"
		;;
	*)
		error 30
		;;
	esac
}

cleanOld()
{
	echo "Deleting backup files over $DAYS days old"
	find $BACKUPROOT -type f -mtime +$DAYS -delete
	case $? in
	0)
		echo "Delete of backup files over $DAYS days old successful"
		;;
	*)
		error 30
		;;
	esac
}

compressBackup()
{
	echo "Compressing $TARFILE"
	zstd --rm $BACKUPDIR/$TARFILE &> /dev/null
	case $? in
	0)
		echo "Backup $TARFILE successfully compressed"
		;;
	*)
		error 80
		;;
	esac
}

error()
{
	echo "Error: $1"
	logger "Error: $1"

	exit $1
}

initialise()
{
	# Treat unset variables as an error when substituting.
	set -u

	AWSBIN=/usr/bin/s3cmd
	AWSCFG=~/.s3cfg

	# Files older than this many days will be deleted
	DAYS=45

	COMMANDS="zstd"

	case $S3 in
	yes)
		if [ -f $AWSCFG ]
		then
			true
		else
			error 40
		fi

		COMMANDS="$COMMANDS $AWSBIN"
		;;
	no)
		true
		;;
	*)
		# This shouldn't happen
		error 42
	esac

	for I in $COMMANDS
	do
		command -v $I &> /dev/null
		case $? in
		0)
			echo "Command $I found"
			;;
		*)
			echo "Could not find command $I"
			error 44
			;;
		esac
	done

	APPNAME="$(basename $0)"

	BACKUPROOT=/srv/fs1/avfmbkup/backups/filesystems

	BACKUPDIR=$BACKUPROOT/$HOST/$DIRECTORY

	mkdir -p $BACKUPDIR
	case $? in
	0)
		echo "Directory $BACKUPDIR available"
		;;
	*)
		error 46
		;;
	esac

	TIMESTAMP=$(date +%s)

	TARFILE=$HOST.$DIRECTORY.$TIMESTAMP.$$.tar
}

remoteBackup()
{
	echo "Backing up filesystem /$DIRECTORY on $HOST"
	echo "Creating tar file $TARFILE"
    ssh root@$HOST tar --warning=no-file-changed -cf - /$DIRECTORY > $BACKUPDIR/$TARFILE 2> /dev/null
	# Certain errors are ok
	# Once I have that nailed down I can re-enable this
    #case $? in
    #0)
    #        true
    #        ;;
    #*)
    #        error 50
    #        ;;
    #esac
}

splitBackup()
{
	echo "Splitting tar file"
	if [ -f $BACKUPDIR/$TARFILE ]
	then
		split -b 10G $BACKUPDIR/$TARFILE $TARFILE.
		case $? in
		0)
			true
			;;
		*)
			error 70
			;;
		esac
	fi
}

#
# Main
#

case $1 in
	"")
        error 11
		;;
	*)
		HOST=$1
		;;
esac

case $2 in
	"")
        error 12
		;;
	*)
		DIRECTORY=$2
		;;
esac

case $3 in
	"")
        BUCKET=""
		S3=no
		;;
	*)
		BUCKET=$3
		S3=yes
		;;
esac

initialise
cleanEmpty
cleanOld
remoteBackup
compressBackup
backupToS3
